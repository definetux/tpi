// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodeUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddGoodPath - Use 'AddGoodPathParams' to pass parameters into this method.
        /// </summary>
        public void AddGoodPath()
        {
            #region Variable Declarations
            WpfEdit uITbPathEdit = this.UIFilePathTesterWindow.UITbPathEdit;
            WpfButton uIДобавитьButton = this.UIFilePathTesterWindow.UIДобавитьButton;
            #endregion

            // Type 'd:\folder' in 'tbPath' text box
            uITbPathEdit.Text = this.AddGoodPathParams.UITbPathEditText;

            // Click 'Добавить' button
            Mouse.Click(uIДобавитьButton, new Point(76, 23));
        }
        
        /// <summary>
        /// AssertTruePathList - Use 'AssertTruePathListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTruePathList()
        {
            #region Variable Declarations
            WpfListItem uIDfolderListItem = this.UIFilePathTesterWindow.UILstTruePathList.UIDfolderListItem;
            #endregion

            // Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
            Assert.AreEqual(this.AssertTruePathListExpectedValues.UIDfolderListItemDisplayText, uIDfolderListItem.DisplayText);
        }
        
        /// <summary>
        /// AddBadPath - Use 'AddBadPathParams' to pass parameters into this method.
        /// </summary>
        public void AddBadPath()
        {
            #region Variable Declarations
            WpfEdit uITbPathEdit = this.UIFilePathTesterWindow.UITbPathEdit;
            WpfButton uIДобавитьButton = this.UIFilePathTesterWindow.UIДобавитьButton;
            #endregion

            // Type 'da:\folder' in 'tbPath' text box
            uITbPathEdit.Text = this.AddBadPathParams.UITbPathEditText;

            // Click 'Добавить' button
            Mouse.Click(uIДобавитьButton, new Point(33, 20));
        }
        
        /// <summary>
        /// AssertBadPathList - Use 'AssertBadPathListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBadPathList()
        {
            #region Variable Declarations
            WpfListItem uIDafolderListItem = this.UIFilePathTesterWindow.UILstFalsePathList.UIDafolderListItem;
            #endregion

            // Verify that the 'DisplayText' property of 'da:\folder' list item equals 'da:\folder'
            Assert.AreEqual(this.AssertBadPathListExpectedValues.UIDafolderListItemDisplayText, uIDafolderListItem.DisplayText);
        }
        
        /// <summary>
        /// MoveTruePath - Use 'MoveTruePathParams' to pass parameters into this method.
        /// </summary>
        public void MoveTruePath()
        {
            #region Variable Declarations
            WpfList uILstTruePathList = this.UIFilePathTesterWindow.UILstTruePathList;
            WpfButton uIПереместитьButton = this.UIFilePathTesterWindow.UIПереместитьButton;
            #endregion

            // Select 'd:\folder' in 'lstTruePath' list box
            uILstTruePathList.SelectedItemsAsString = this.MoveTruePathParams.UILstTruePathListSelectedItemsAsString;

            // Click 'Переместить' button
            Mouse.Click(uIПереместитьButton, new Point(62, 18));
        }
        
        /// <summary>
        /// AssertBadPathListAfterMove - Use 'AssertBadPathListAfterMoveExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBadPathListAfterMove()
        {
            #region Variable Declarations
            WpfListItem uIDfolderListItem = this.UIFilePathTesterWindow.UILstFalsePathList.UIDfolderListItem;
            #endregion

            // Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
            Assert.AreEqual(this.AssertBadPathListAfterMoveExpectedValues.UIDfolderListItemDisplayText, uIDfolderListItem.DisplayText);
        }
        
        /// <summary>
        /// RemoveBadPath - Use 'RemoveBadPathParams' to pass parameters into this method.
        /// </summary>
        public void RemoveBadPath()
        {
            #region Variable Declarations
            WpfList uILstFalsePathList = this.UIFilePathTesterWindow.UILstFalsePathList;
            WpfEdit uITbPathEdit = this.UIFilePathTesterWindow.UITbPathEdit;
            WpfButton uIДобавитьButton = this.UIFilePathTesterWindow.UIДобавитьButton;
            WpfButton uIУдалитьButton = this.UIFilePathTesterWindow.UIУдалитьButton;
            #endregion

            // Select 'da:\folder' in 'lstFalsePath' list box
            uILstFalsePathList.SelectedItemsAsString = this.RemoveBadPathParams.UILstFalsePathListSelectedItemsAsString;

            // Type 'ds:folder' in 'tbPath' text box
            uITbPathEdit.Text = this.RemoveBadPathParams.UITbPathEditText;

            // Click 'Добавить' button
            Mouse.Click(uIДобавитьButton, new Point(47, 16));

            // Select 'ds:folder' in 'lstFalsePath' list box
            uILstFalsePathList.SelectedItemsAsString = this.RemoveBadPathParams.UILstFalsePathListSelectedItemsAsString1;

            // Click 'Удалить' button
            Mouse.Click(uIУдалитьButton, new Point(64, 20));
        }
        
        /// <summary>
        /// AssertBadPathListAfterRemove - Use 'AssertBadPathListAfterRemoveExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBadPathListAfterRemove()
        {
            #region Variable Declarations
            WpfListItem uIDafolderListItem = this.UIFilePathTesterWindow.UILstFalsePathList.UIDafolderListItem;
            #endregion

            // Verify that the 'DisplayText' property of 'da:\folder' list item equals 'da:\folder'
            Assert.AreEqual(this.AssertBadPathListAfterRemoveExpectedValues.UIDafolderListItemDisplayText, uIDafolderListItem.DisplayText);
        }
        
        /// <summary>
        /// RemoveTruePath - Use 'RemoveTruePathParams' to pass parameters into this method.
        /// </summary>
        public void RemoveTruePath()
        {
            #region Variable Declarations
            WinWindow uIFilePathTesterWindow1 = this.UIFilePathTesterWindow1;
            WpfEdit uITbPathEdit = this.UIFilePathTesterWindow.UITbPathEdit;
            WpfButton uIДобавитьButton = this.UIFilePathTesterWindow.UIДобавитьButton;
            WpfList uILstTruePathList = this.UIFilePathTesterWindow.UILstTruePathList;
            WpfButton uIУдалитьButton1 = this.UIFilePathTesterWindow.UIУдалитьButton1;
            #endregion

            // Click 'FilePathTester' window
            Mouse.Click(uIFilePathTesterWindow1, new Point(148, 39));

            // Type 'c:\folder' in 'tbPath' text box
            uITbPathEdit.Text = this.RemoveTruePathParams.UITbPathEditText;

            // Click 'Добавить' button
            Mouse.Click(uIДобавитьButton, new Point(38, 7));

            // Select 'c:\folder' in 'lstTruePath' list box
            uILstTruePathList.SelectedItemsAsString = this.RemoveTruePathParams.UILstTruePathListSelectedItemsAsString;

            // Click 'Удалить' button
            Mouse.Click(uIУдалитьButton1, new Point(58, 13));
        }
        
        /// <summary>
        /// AssertTruePathListAfterRemoving - Use 'AssertTruePathListAfterRemovingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTruePathListAfterRemoving()
        {
            #region Variable Declarations
            WpfListItem uIDfolderListItem = this.UIFilePathTesterWindow.UILstTruePathList.UIDfolderListItem;
            #endregion

            // Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
            Assert.AreEqual(this.AssertTruePathListAfterRemovingExpectedValues.UIDfolderListItemDisplayText, uIDfolderListItem.DisplayText);
        }
        
        /// <summary>
        /// BackBadPath - Use 'BackBadPathParams' to pass parameters into this method.
        /// </summary>
        public void BackBadPath()
        {
            #region Variable Declarations
            WpfList uILstFalsePathList = this.UIFilePathTesterWindow.UILstFalsePathList;
            WpfButton uIВернутьButton = this.UIFilePathTesterWindow.UIВернутьButton;
            #endregion

            // Select 'da:\folder' in 'lstFalsePath' list box
            uILstFalsePathList.SelectedItemsAsString = this.BackBadPathParams.UILstFalsePathListSelectedItemsAsString;

            // Click 'Вернуть' button
            Mouse.Click(uIВернутьButton, new Point(39, 18));
        }
        
        /// <summary>
        /// AssertInputAfterBacking - Use 'AssertInputAfterBackingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputAfterBacking()
        {
            #region Variable Declarations
            WpfEdit uITbPathEdit = this.UIFilePathTesterWindow.UITbPathEdit;
            #endregion

            // Verify that the 'Text' property of 'tbPath' text box equals 'da:\folder'
            Assert.AreEqual(this.AssertInputAfterBackingExpectedValues.UITbPathEditText, uITbPathEdit.Text);
        }
        
        /// <summary>
        /// AddEmptyPath
        /// </summary>
        public void AddEmptyPath()
        {
            #region Variable Declarations
            WpfButton uIДобавитьButton = this.UIFilePathTesterWindow.UIДобавитьButton;
            #endregion

            // Click 'Добавить' button
            Mouse.Click(uIДобавитьButton, new Point(43, 12));
        }
        
        /// <summary>
        /// AssertMessageAfterAddingEmptyPath - Use 'AssertMessageAfterAddingEmptyPathExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMessageAfterAddingEmptyPath()
        {
            #region Variable Declarations
            WinText uIEmptystringText = this.UIEmptystringWindow.UIEmptystringText;
            #endregion

            // Verify that the 'DisplayText' property of 'Empty string!' label equals 'Empty string!'
            Assert.AreEqual(this.AssertMessageAfterAddingEmptyPathExpectedValues.UIEmptystringTextDisplayText, uIEmptystringText.DisplayText);
        }
        
        /// <summary>
        /// BackEmptyBadPath
        /// </summary>
        public void BackEmptyBadPath()
        {
            #region Variable Declarations
            WpfButton uIВернутьButton = this.UIFilePathTesterWindow.UIВернутьButton;
            #endregion

            // Click 'Вернуть' button
            Mouse.Click(uIВернутьButton, new Point(17, 5));
        }
        
        /// <summary>
        /// AssertMessageAfterBackingEmptyBadPath - Use 'AssertMessageAfterBackingEmptyBadPathExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMessageAfterBackingEmptyBadPath()
        {
            #region Variable Declarations
            WinText uIYouhaventchosenapathText = this.UIYouhaventchosenapathWindow.UIYouhaventchosenapathText;
            #endregion

            // Verify that the 'DisplayText' property of 'You haven’t chosen a path to re-check!' label equals 'You haven’t chosen a path to re-check!'
            Assert.AreEqual(this.AssertMessageAfterBackingEmptyBadPathExpectedValues.UIYouhaventchosenapathTextDisplayText, uIYouhaventchosenapathText.DisplayText);
        }
        
        #region Properties
        public virtual AddGoodPathParams AddGoodPathParams
        {
            get
            {
                if ((this.mAddGoodPathParams == null))
                {
                    this.mAddGoodPathParams = new AddGoodPathParams();
                }
                return this.mAddGoodPathParams;
            }
        }
        
        public virtual AssertTruePathListExpectedValues AssertTruePathListExpectedValues
        {
            get
            {
                if ((this.mAssertTruePathListExpectedValues == null))
                {
                    this.mAssertTruePathListExpectedValues = new AssertTruePathListExpectedValues();
                }
                return this.mAssertTruePathListExpectedValues;
            }
        }
        
        public virtual AddBadPathParams AddBadPathParams
        {
            get
            {
                if ((this.mAddBadPathParams == null))
                {
                    this.mAddBadPathParams = new AddBadPathParams();
                }
                return this.mAddBadPathParams;
            }
        }
        
        public virtual AssertBadPathListExpectedValues AssertBadPathListExpectedValues
        {
            get
            {
                if ((this.mAssertBadPathListExpectedValues == null))
                {
                    this.mAssertBadPathListExpectedValues = new AssertBadPathListExpectedValues();
                }
                return this.mAssertBadPathListExpectedValues;
            }
        }
        
        public virtual MoveTruePathParams MoveTruePathParams
        {
            get
            {
                if ((this.mMoveTruePathParams == null))
                {
                    this.mMoveTruePathParams = new MoveTruePathParams();
                }
                return this.mMoveTruePathParams;
            }
        }
        
        public virtual AssertBadPathListAfterMoveExpectedValues AssertBadPathListAfterMoveExpectedValues
        {
            get
            {
                if ((this.mAssertBadPathListAfterMoveExpectedValues == null))
                {
                    this.mAssertBadPathListAfterMoveExpectedValues = new AssertBadPathListAfterMoveExpectedValues();
                }
                return this.mAssertBadPathListAfterMoveExpectedValues;
            }
        }
        
        public virtual RemoveBadPathParams RemoveBadPathParams
        {
            get
            {
                if ((this.mRemoveBadPathParams == null))
                {
                    this.mRemoveBadPathParams = new RemoveBadPathParams();
                }
                return this.mRemoveBadPathParams;
            }
        }
        
        public virtual AssertBadPathListAfterRemoveExpectedValues AssertBadPathListAfterRemoveExpectedValues
        {
            get
            {
                if ((this.mAssertBadPathListAfterRemoveExpectedValues == null))
                {
                    this.mAssertBadPathListAfterRemoveExpectedValues = new AssertBadPathListAfterRemoveExpectedValues();
                }
                return this.mAssertBadPathListAfterRemoveExpectedValues;
            }
        }
        
        public virtual RemoveTruePathParams RemoveTruePathParams
        {
            get
            {
                if ((this.mRemoveTruePathParams == null))
                {
                    this.mRemoveTruePathParams = new RemoveTruePathParams();
                }
                return this.mRemoveTruePathParams;
            }
        }
        
        public virtual AssertTruePathListAfterRemovingExpectedValues AssertTruePathListAfterRemovingExpectedValues
        {
            get
            {
                if ((this.mAssertTruePathListAfterRemovingExpectedValues == null))
                {
                    this.mAssertTruePathListAfterRemovingExpectedValues = new AssertTruePathListAfterRemovingExpectedValues();
                }
                return this.mAssertTruePathListAfterRemovingExpectedValues;
            }
        }
        
        public virtual BackBadPathParams BackBadPathParams
        {
            get
            {
                if ((this.mBackBadPathParams == null))
                {
                    this.mBackBadPathParams = new BackBadPathParams();
                }
                return this.mBackBadPathParams;
            }
        }
        
        public virtual AssertInputAfterBackingExpectedValues AssertInputAfterBackingExpectedValues
        {
            get
            {
                if ((this.mAssertInputAfterBackingExpectedValues == null))
                {
                    this.mAssertInputAfterBackingExpectedValues = new AssertInputAfterBackingExpectedValues();
                }
                return this.mAssertInputAfterBackingExpectedValues;
            }
        }
        
        public virtual AssertMessageAfterAddingEmptyPathExpectedValues AssertMessageAfterAddingEmptyPathExpectedValues
        {
            get
            {
                if ((this.mAssertMessageAfterAddingEmptyPathExpectedValues == null))
                {
                    this.mAssertMessageAfterAddingEmptyPathExpectedValues = new AssertMessageAfterAddingEmptyPathExpectedValues();
                }
                return this.mAssertMessageAfterAddingEmptyPathExpectedValues;
            }
        }
        
        public virtual AssertMessageAfterBackingEmptyBadPathExpectedValues AssertMessageAfterBackingEmptyBadPathExpectedValues
        {
            get
            {
                if ((this.mAssertMessageAfterBackingEmptyBadPathExpectedValues == null))
                {
                    this.mAssertMessageAfterBackingEmptyBadPathExpectedValues = new AssertMessageAfterBackingEmptyBadPathExpectedValues();
                }
                return this.mAssertMessageAfterBackingEmptyBadPathExpectedValues;
            }
        }
        
        public UIFilePathTesterWindow UIFilePathTesterWindow
        {
            get
            {
                if ((this.mUIFilePathTesterWindow == null))
                {
                    this.mUIFilePathTesterWindow = new UIFilePathTesterWindow();
                }
                return this.mUIFilePathTesterWindow;
            }
        }
        
        public UIFilePathTesterWindow1 UIFilePathTesterWindow1
        {
            get
            {
                if ((this.mUIFilePathTesterWindow1 == null))
                {
                    this.mUIFilePathTesterWindow1 = new UIFilePathTesterWindow1();
                }
                return this.mUIFilePathTesterWindow1;
            }
        }
        
        public UIEmptystringWindow UIEmptystringWindow
        {
            get
            {
                if ((this.mUIEmptystringWindow == null))
                {
                    this.mUIEmptystringWindow = new UIEmptystringWindow();
                }
                return this.mUIEmptystringWindow;
            }
        }
        
        public UIYouhaventchosenapathWindow UIYouhaventchosenapathWindow
        {
            get
            {
                if ((this.mUIYouhaventchosenapathWindow == null))
                {
                    this.mUIYouhaventchosenapathWindow = new UIYouhaventchosenapathWindow();
                }
                return this.mUIYouhaventchosenapathWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddGoodPathParams mAddGoodPathParams;
        
        private AssertTruePathListExpectedValues mAssertTruePathListExpectedValues;
        
        private AddBadPathParams mAddBadPathParams;
        
        private AssertBadPathListExpectedValues mAssertBadPathListExpectedValues;
        
        private MoveTruePathParams mMoveTruePathParams;
        
        private AssertBadPathListAfterMoveExpectedValues mAssertBadPathListAfterMoveExpectedValues;
        
        private RemoveBadPathParams mRemoveBadPathParams;
        
        private AssertBadPathListAfterRemoveExpectedValues mAssertBadPathListAfterRemoveExpectedValues;
        
        private RemoveTruePathParams mRemoveTruePathParams;
        
        private AssertTruePathListAfterRemovingExpectedValues mAssertTruePathListAfterRemovingExpectedValues;
        
        private BackBadPathParams mBackBadPathParams;
        
        private AssertInputAfterBackingExpectedValues mAssertInputAfterBackingExpectedValues;
        
        private AssertMessageAfterAddingEmptyPathExpectedValues mAssertMessageAfterAddingEmptyPathExpectedValues;
        
        private AssertMessageAfterBackingEmptyBadPathExpectedValues mAssertMessageAfterBackingEmptyBadPathExpectedValues;
        
        private UIFilePathTesterWindow mUIFilePathTesterWindow;
        
        private UIFilePathTesterWindow1 mUIFilePathTesterWindow1;
        
        private UIEmptystringWindow mUIEmptystringWindow;
        
        private UIYouhaventchosenapathWindow mUIYouhaventchosenapathWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddGoodPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddGoodPathParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd:\folder' in 'tbPath' text box
        /// </summary>
        public string UITbPathEditText = "d:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTruePathList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertTruePathListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
        /// </summary>
        public string UIDfolderListItemDisplayText = "d:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddBadPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddBadPathParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'da:\folder' in 'tbPath' text box
        /// </summary>
        public string UITbPathEditText = "da:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBadPathList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertBadPathListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'da:\folder' list item equals 'da:\folder'
        /// </summary>
        public string UIDafolderListItemDisplayText = "da:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveTruePath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class MoveTruePathParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'd:\folder' in 'lstTruePath' list box
        /// </summary>
        public string UILstTruePathListSelectedItemsAsString = "d:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBadPathListAfterMove'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertBadPathListAfterMoveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
        /// </summary>
        public string UIDfolderListItemDisplayText = "d:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RemoveBadPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RemoveBadPathParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'da:\folder' in 'lstFalsePath' list box
        /// </summary>
        public string UILstFalsePathListSelectedItemsAsString = "da:\\folder";
        
        /// <summary>
        /// Type 'ds:folder' in 'tbPath' text box
        /// </summary>
        public string UITbPathEditText = "ds:folder";
        
        /// <summary>
        /// Select 'ds:folder' in 'lstFalsePath' list box
        /// </summary>
        public string UILstFalsePathListSelectedItemsAsString1 = "ds:folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBadPathListAfterRemove'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertBadPathListAfterRemoveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'da:\folder' list item equals 'da:\folder'
        /// </summary>
        public string UIDafolderListItemDisplayText = "da:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RemoveTruePath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RemoveTruePathParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'c:\folder' in 'tbPath' text box
        /// </summary>
        public string UITbPathEditText = "c:\\folder";
        
        /// <summary>
        /// Select 'c:\folder' in 'lstTruePath' list box
        /// </summary>
        public string UILstTruePathListSelectedItemsAsString = "c:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTruePathListAfterRemoving'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertTruePathListAfterRemovingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'd:\folder' list item equals 'd:\folder'
        /// </summary>
        public string UIDfolderListItemDisplayText = "d:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BackBadPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BackBadPathParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'da:\folder' in 'lstFalsePath' list box
        /// </summary>
        public string UILstFalsePathListSelectedItemsAsString = "da:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputAfterBacking'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertInputAfterBackingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tbPath' text box equals 'da:\folder'
        /// </summary>
        public string UITbPathEditText = "da:\\folder";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMessageAfterAddingEmptyPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMessageAfterAddingEmptyPathExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Empty string!' label equals 'Empty string!'
        /// </summary>
        public string UIEmptystringTextDisplayText = "Empty string!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMessageAfterBackingEmptyBadPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMessageAfterBackingEmptyBadPathExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'You haven’t chosen a path to re-check!' label equals 'You haven’t chosen a path to re-check!'
        /// </summary>
        public string UIYouhaventchosenapathTextDisplayText = "You haven’t chosen a path to re-check!";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFilePathTesterWindow : WpfWindow
    {
        
        public UIFilePathTesterWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "FilePathTester";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("FilePathTester");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbPathEdit
        {
            get
            {
                if ((this.mUITbPathEdit == null))
                {
                    this.mUITbPathEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbPathEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbPath";
                    this.mUITbPathEdit.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUITbPathEdit;
            }
        }
        
        public WpfButton UIДобавитьButton
        {
            get
            {
                if ((this.mUIДобавитьButton == null))
                {
                    this.mUIДобавитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIДобавитьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnAdd";
                    this.mUIДобавитьButton.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIДобавитьButton;
            }
        }
        
        public UILstTruePathList UILstTruePathList
        {
            get
            {
                if ((this.mUILstTruePathList == null))
                {
                    this.mUILstTruePathList = new UILstTruePathList(this);
                }
                return this.mUILstTruePathList;
            }
        }
        
        public UILstFalsePathList UILstFalsePathList
        {
            get
            {
                if ((this.mUILstFalsePathList == null))
                {
                    this.mUILstFalsePathList = new UILstFalsePathList(this);
                }
                return this.mUILstFalsePathList;
            }
        }
        
        public WpfButton UIПереместитьButton
        {
            get
            {
                if ((this.mUIПереместитьButton == null))
                {
                    this.mUIПереместитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIПереместитьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnMoveTrue";
                    this.mUIПереместитьButton.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIПереместитьButton;
            }
        }
        
        public WpfButton UIУдалитьButton
        {
            get
            {
                if ((this.mUIУдалитьButton == null))
                {
                    this.mUIУдалитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIУдалитьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnRemoveFalse";
                    this.mUIУдалитьButton.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIУдалитьButton;
            }
        }
        
        public WpfButton UIУдалитьButton1
        {
            get
            {
                if ((this.mUIУдалитьButton1 == null))
                {
                    this.mUIУдалитьButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIУдалитьButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnRemoveTrue";
                    this.mUIУдалитьButton1.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIУдалитьButton1;
            }
        }
        
        public WpfButton UIВернутьButton
        {
            get
            {
                if ((this.mUIВернутьButton == null))
                {
                    this.mUIВернутьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIВернутьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnBackFalse";
                    this.mUIВернутьButton.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIВернутьButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbPathEdit;
        
        private WpfButton mUIДобавитьButton;
        
        private UILstTruePathList mUILstTruePathList;
        
        private UILstFalsePathList mUILstFalsePathList;
        
        private WpfButton mUIПереместитьButton;
        
        private WpfButton mUIУдалитьButton;
        
        private WpfButton mUIУдалитьButton1;
        
        private WpfButton mUIВернутьButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UILstTruePathList : WpfList
    {
        
        public UILstTruePathList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lstTruePath";
            this.WindowTitles.Add("FilePathTester");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIDfolderListItem
        {
            get
            {
                if ((this.mUIDfolderListItem == null))
                {
                    this.mUIDfolderListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDfolderListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "d:\\folder";
                    this.mUIDfolderListItem.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIDfolderListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIDfolderListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UILstFalsePathList : WpfList
    {
        
        public UILstFalsePathList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lstFalsePath";
            this.WindowTitles.Add("FilePathTester");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIDafolderListItem
        {
            get
            {
                if ((this.mUIDafolderListItem == null))
                {
                    this.mUIDafolderListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDafolderListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "da:\\folder";
                    this.mUIDafolderListItem.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIDafolderListItem;
            }
        }
        
        public WpfListItem UIDfolderListItem
        {
            get
            {
                if ((this.mUIDfolderListItem == null))
                {
                    this.mUIDfolderListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDfolderListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "d:\\folder";
                    this.mUIDfolderListItem.WindowTitles.Add("FilePathTester");
                    #endregion
                }
                return this.mUIDfolderListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIDafolderListItem;
        
        private WpfListItem mUIDfolderListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFilePathTesterWindow1 : WinWindow
    {
        
        public UIFilePathTesterWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "FilePathTester";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("FilePathTester");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIEmptystringWindow : WinWindow
    {
        
        public UIEmptystringWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Empty string!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Empty string!");
            #endregion
        }
        
        #region Properties
        public WinText UIEmptystringText
        {
            get
            {
                if ((this.mUIEmptystringText == null))
                {
                    this.mUIEmptystringText = new WinText(this);
                    #region Search Criteria
                    this.mUIEmptystringText.SearchProperties[WinText.PropertyNames.Name] = "Empty string!";
                    this.mUIEmptystringText.WindowTitles.Add("Empty string!");
                    #endregion
                }
                return this.mUIEmptystringText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIEmptystringText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYouhaventchosenapathWindow : WinWindow
    {
        
        public UIYouhaventchosenapathWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "You haven’t chosen a path to re-check!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("You haven’t chosen a path to re-check!");
            #endregion
        }
        
        #region Properties
        public WinText UIYouhaventchosenapathText
        {
            get
            {
                if ((this.mUIYouhaventchosenapathText == null))
                {
                    this.mUIYouhaventchosenapathText = new WinText(this);
                    #region Search Criteria
                    this.mUIYouhaventchosenapathText.SearchProperties[WinText.PropertyNames.Name] = "You haven’t chosen a path to re-check!";
                    this.mUIYouhaventchosenapathText.WindowTitles.Add("You haven’t chosen a path to re-check!");
                    #endregion
                }
                return this.mUIYouhaventchosenapathText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIYouhaventchosenapathText;
        #endregion
    }
}
